<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="143" tokens="665">
<file line="24" path="/var/lib/jenkins/jobs/Nanoko - coffee-mill-maven-plugin/workspace/coffee-mill-maven-plugin/src/main/java/org/nanoko/coffee/mill/mojos/compile/JSHintOptions.java"/>
<file line="23" path="/var/lib/jenkins/jobs/Nanoko - coffee-mill-maven-plugin/workspace/coffee-mill-maven-plugin/src/main/java/org/nanoko/coffee/mill/mojos/reporting/JSHintOptions.java"/>
<codefragment>
<![CDATA[
public class JSHintOptions {
    //String format options
    private String options;

    private Boolean bitwise;
    private Boolean camelcase;
    private Boolean curly;
    private Boolean eqeqeq;
    private Boolean es3;
    private Boolean forin;
    private Boolean immed;
    private Boolean indent;
    private Boolean latedef;
    private Boolean newcap;
    private Boolean noarg;
    private Boolean noempty;
    private Boolean nonew;
    private Boolean plusplus;
    private String  quotmark; //single, double or true
    private Boolean undef;
    private Boolean unused;
    private Boolean strict;
    private Boolean trailing;
    private Integer maxparams;
    private Integer maxdepth;
    private Integer maxstatements;
    private Integer maxcomplexity;
    private Integer maxlen;

    public String[] format(){
        Set<String> formatOpts = new HashSet<String>();

        //Parse the string
        if(options !=null && !options.isEmpty()){
            options=options.replaceAll(" ",""); //remove space

            //must match ^\w+(=(\w+))?(,\w+(=(\w+))?)*$
            if(!options.matches("^\\w+(=(\\w+))?(,\\w+(=(\\w+))?)*$")){
                throw new IllegalArgumentException("The jshintOptions options is not formated correctly," +
                    "the format support String such as: <key>,<key>=<value>");
            }

            Collections.addAll(formatOpts, options.split(","));
        }

        if(bitwise != null){
            formatOpts.add("bitwise=" + bitwise.toString());
        }

        if(camelcase != null){
            formatOpts.add("camelcase=" +camelcase.toString());
        }

        if(curly != null){
            formatOpts.add("curly=" +curly.toString());
        }

        if(es3 != null){
            formatOpts.add("es3=" +es3.toString());
        }

        if(forin != null){
            formatOpts.add("forin=" +forin.toString());
        }

        if(immed != null){
            formatOpts.add("immed=" +immed.toString());
        }

        if(indent != null){
            formatOpts.add("indent=" +indent.toString());
        }

        if(latedef != null){
            formatOpts.add("latedef=" +latedef.toString());
        }

        if(newcap != null){
            formatOpts.add("newcap=" +newcap.toString());
        }

        if(noarg != null){
            formatOpts.add("noarg=" +noarg.toString());
        }

        if(noempty != null){
            formatOpts.add("noempty=" +noempty.toString());
        }

        if(nonew != null){
            formatOpts.add("nonew=" +nonew.toString());
        }

        if(plusplus != null){
            formatOpts.add("plusplus=" +plusplus.toString());
        }

        if(quotmark != null){
            if(!(quotmark.equals("single") || quotmark.equals("double") || quotmark.equals("true"))){
                throw new IllegalArgumentException("The jshintOptions quotmark must have the value single,double or true");
            }
            formatOpts.add("quotmark=" +quotmark);
        }

        if(undef != null){
            formatOpts.add("undef=" + undef.toString());
        }

        if(unused != null){
            formatOpts.add("unused=" + unused.toString());
        }

        if(strict != null){
            formatOpts.add("strict=" + strict.toString());
        }

        if(trailing != null){
            formatOpts.add("trailing=" + trailing.toString());
        }

        if(maxparams != null){
            formatOpts.add("maxparams=" + maxparams.toString());
        }

        if(maxdepth != null){
            formatOpts.add("maxdepth=" + maxdepth.toString());
        }

        if(maxstatements != null){
            formatOpts.add("maxstatements=" + maxstatements.toString());
        }

        if(maxcomplexity != null){
            formatOpts.add("maxcomplexity=" + maxcomplexity.toString());
        }

        if(maxlen != null){
            formatOpts.add("maxlen=" + maxlen.toString());
        }

        return formatOpts.toArray(new String[formatOpts.size()]);
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="204">
<file line="39" path="/var/lib/jenkins/jobs/Nanoko - coffee-mill-maven-plugin/workspace/coffee-mill-maven-plugin/src/main/java/org/nanoko/coffee/mill/processors/JSHintProcessor.java"/>
<file line="38" path="/var/lib/jenkins/jobs/Nanoko - coffee-mill-maven-plugin/workspace/coffee-mill-maven-plugin/src/main/java/org/nanoko/coffee/mill/processors/JSLintProcessor.java"/>
<codefragment>
<![CDATA[
        getLog().info("Checking sources with JsLint");
        Collection<File> files = FileUtils.listFiles(mojo.getWorkDirectory(), new String[]{"js"}, true);
        for (File file : files) {
            List<ProcessorWarning> warnings = validate(file);
            getLog().info("Found " + warnings.size() + " issues in " + file.getAbsolutePath());
            for (ProcessorWarning warning: warnings) {
                getLog().warn("In " + warning.file.getName() + " @" + warning.line + ":" + warning.character
                        + " -> " + warning.evidence + " - " + warning.reason);
            }
        }
    }

    @Override
    public boolean accept(File file) {
        return file.isFile() && isFileContainedInDirectory(file, mojo.getWorkDirectory());
    }

    @Override
    public void fileCreated(File file) throws ProcessorException {
        validate(file);
    }

    @Override
    public void fileUpdated(File file) throws ProcessorException {
        validate(file);
    }

    public List<ProcessorWarning> validate(File file) {
        List<ProcessorWarning> warnings = new ArrayList<ProcessorWarning>();
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="151">
<file line="247" path="/var/lib/jenkins/jobs/Nanoko - coffee-mill-maven-plugin/workspace/coffee-mill-maven-plugin/src/main/java/org/nanoko/coffee/mill/utils/RhinoLauncher.java"/>
<file line="96" path="/var/lib/jenkins/jobs/Nanoko - coffee-mill-maven-plugin/workspace/coffee-mill-maven-plugin/src/main/java/org/nanoko/coffee/mill/utils/SlimedRhinoLauncher.java"/>
<codefragment>
<![CDATA[
    public static String toJSMultiLineString(String data){
        final String[] lines = data.split("\n");
        final StringBuffer result = new StringBuffer("[");
        if (lines.length == 0) {
            result.append("\"\"");
        }
        for (int i = 0; i < lines.length; i++) {
            final String line = lines[i];
            result.append("\"");
            result.append(line.replace("\\", "\\\\").replace("\"", "\\\"").replaceAll("\\r|\\n", ""));
            // this is used to force a single line to have at least one new line (otherwise cssLint fails).
            if (lines.length == 1) {
                result.append("\\n");
            }
            result.append("\"");
            if (i < lines.length - 1) {
                result.append(",");
            }
        }
        result.append("].join(\"\\n\")");
        return result.toString();
    }
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="141">
<file line="71" path="/var/lib/jenkins/jobs/Nanoko - coffee-mill-maven-plugin/workspace/coffee-mill-maven-plugin/src/main/java/org/nanoko/coffee/mill/utils/JasmineUtils.java"/>
<file line="119" path="/var/lib/jenkins/jobs/Nanoko - coffee-mill-maven-plugin/workspace/coffee-mill-maven-plugin/src/main/java/org/nanoko/coffee/mill/utils/JasmineUtils.java"/>
<codefragment>
<![CDATA[
        for (Dependency dep : (Collection<Dependency>) mill.project.getDependencies()) {
            if ("js".equals(dep.getType())) {
                String filename = dep.getArtifactId() + ".js";
                if (dep.getClassifier() != null  && ! dep.getClassifier().equals("min")) {
                    filename = dep.getArtifactId() + "-" + dep.getClassifier() + ".js";
                }
                File file = new File(mill.getLibDirectory(), filename);

                if (! file.exists()) {
                    mill.getLog().error("Cannot preload " + dep.getArtifactId() + ":" + dep.getVersion() + " : " +
                            file
                                    .getAbsolutePath() + " not found");
                } else {
                    try {
                        FileUtils.copyFileToDirectory(file, getJasmineITDirectory(mill.project));
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="134">
<file line="73" path="/var/lib/jenkins/jobs/Nanoko - coffee-mill-maven-plugin/workspace/coffee-mill-maven-plugin/src/main/java/org/nanoko/coffee/mill/processors/CSSFileCopyProcessor.java"/>
<file line="79" path="/var/lib/jenkins/jobs/Nanoko - coffee-mill-maven-plugin/workspace/coffee-mill-maven-plugin/src/main/java/org/nanoko/coffee/mill/processors/JavaScriptFileCopyProcessor.java"/>
<codefragment>
<![CDATA[
        return isFileContainedInDirectory(file, source)  && file.isFile()  &&  file.getName().endsWith(".js");
    }

    public void fileCreated(File file) throws ProcessorException {
        getLog().info("Copying " + file.getAbsolutePath() + " to " + destination.getAbsolutePath());
        copyFileToDir(file, source, destination);
    }

    public void fileUpdated(File file) throws ProcessorException {
        getLog().info("Copying " + file.getAbsolutePath() + " to " + destination.getAbsolutePath());
        copyFileToDir(file, source, destination);
    }

    public void fileDeleted(File file) {
        File rel = computeRelativeFile(file, source, destination);
        if (rel.isFile()) {
            getLog().info("Deleting " + rel.getAbsolutePath());
            rel.delete();
        }
    }

}
]]>
</codefragment>
</duplication>
</pmd-cpd>