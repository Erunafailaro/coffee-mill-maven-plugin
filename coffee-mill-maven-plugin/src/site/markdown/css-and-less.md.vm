Working with Stylesheets
========================

the plugin supports plain CSS, LESS and SASS files. [LESS](http://lesscss.org) and [SASS](http://sass-lang.com) extends CSS with dynamic behavior such
as variables, mixins, operations and functions. LESS and SASS runs on both the client-side (Chrome, Safari,
Firefox) and server-side, with Node.js and Rhino.

Validating CSS files
--------------------

CSS is simple, but there are some rules. The plugin validates CSS files with CSSLint. It does basic syntax checking
as well as applying a set of rules to the code that look for problematic patterns or signs of inefficiency.

Stylesheets are placed in the `src/main/stylesheets`  directory. The validation happens automatically during the
_compile_ phase, but you can launch it using:

    mvn coffeemill:compile-css

Compiling Less files
----------------------

Less files are also in `src/main/stylesheets`. They are compiled during the _compile_ phase,
but you can launch the compilation with:

    mvn coffeemill:compile-less
    
Compiling Sass files
----------------------

SAss files are also in `src/main/stylesheets`. They are compiled during the _compile_ phase,
but you can launch the compilation with:

    mvn coffeemill:compile-sass

Aggregating CSS files
---------------------

CSS files and the output of the Less files can be aggregated within one file. Like for JavaScript,
the order may matter, so you can configure it using the `cssAggregationFiles` parameter. If not set the files are
aggregated using the alphabetical order.

    <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <extensions>true</extensions>
        <configuration>
            <cssAggregationFiles>
                <file>style.css</file>
                <file>my-site.css</file> <!-- Generated form my-site.less or my-site.scss -->
            </cssAggregationFiles>
        </configuration>
    </plugin>

The resulting aggregated file is attached to the project using the `css` extension.

Minification
------------

Once aggregated, the file can be minified using CSSMin Compressor. This step happens automatically if you have an
aggregated CSS file. The resulting minified file is attached to the project using the _min_ classifier and the _css_
packaging type.

If the input file does not exist, the minification process is skipped.


SkipVariables
-------------

By default the packaging process is not skipped, so it launch compilation, aggregation and minification. But variables exist to escape those process :

* skipCssCompilation
* skipCssAggregation
* skipCssMinification

You can include those variables in pom.xml file to enabled/disabled the wanted process, like the following example : 

    <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <extensions>true</extensions>
        <configuration>
            <jsAggregationFiles>
                ...
            </jsAggregationFiles>
            <skipCssCompilation>true</skipCompilation>
            <skipCssAggregation>true</skipAggregation>
            <skipCssMinification>true</skipMinification>
        </configuration>
    </plugin>

The process respect the following order : `compilation` > `aggregation` > `minification`. So if you decide to skip the compilation process, the aggregation and minification are skipped too (and therefore when skipCssCompilation set to true, its useless to define the two others).

