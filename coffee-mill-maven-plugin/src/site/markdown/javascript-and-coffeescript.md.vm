Working with JavaScript and CoffeeScript
========================================

Validating JavaScript files
---------------------------

JavaScript files from `src/main/js` are validated against JSLint. This step is automatically luanch during
the _compile_ phase, however you can launch it using:

    mvn coffeemill:compile-javascript

Unlike for _main_ sources, _test_ sources from `src/test/js` are **not** validated.

Compiling CoffeeScript
----------------------

The plugin is able to compile CoffeeScript sources from the `src/main/coffee` to JavaScript. The output files are in
the `target/www` directory.

CoffeeScript compilation is part of the _js_ packaging lifecycle. However you can launch the compilation with:

    mvn coffeemill:compile-coffeescript

The plugin also support compile _test_ sources with:

    mvn coffeemill:test-compile-coffeescript

Testing JavaScript and CoffeeScript code
---------------------------------------

The plugin supports Jasmine tests. [Jasmine](http://pivotal.github.com/jasmine/) is a behavior-driven development
framework for testing JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a
DOM. And it has a clean, obvious syntax so that you can easily write tests:

    describe("A suite", function() {
        it("contains spec with an expectation", function() {
            expect(true).toBe(true);
        });
    });

Jasmine specs are placed in the `src/test/js` folder (they can also be in `src/test/coffee` if the tests are written
using CoffeeScript).

During the _test_ phase, all specs are executed againt your CoffeeScript and JavaScript code.

The JavaScript files are loaded in the following order:

* Maven dependencies using the _js_ type are preloaded.
* JavaScript / CoffeeScript files are loaded using the order defined in the `jsAggregationFiles` parameter (as below). If not defined, the sources are loaded in the alphabetical order.
* The specifications are loaded


    <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <extensions>true</extensions>
        <configuration>
            <jsAggregationFiles>
                <file>SyndicationService</file>
                <file>FeedEntry</file>
                <file>FeedReader</file>
            </jsAggregationFiles>
        </configuration>
    </plugin>


Test can be run using `mvn test`.

Aggregating JavaScript files
------------------------------------------------

JavaScript and CoffeeScript files can be aggregated into one file. Dependencies can also be included too.
Generally, the order is important, so has to be specified using the `jsAggregationFiles` parameter.

Dependencies are included using their `artifactId`:

    <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <extensions>true</extensions>
        <configuration>
            <jsAggregationFiles>
                <file>syndication-service</file> <!-- This is a dependency, we use the artifact id -->
                <file>FeedReaderImpl.js</file>
            </jsAggregationFiles>
        </configuration>
    </plugin>


Minification
------------

Once aggregated, the file can be minified using `uglify-js` with `npm`.
Minification is not skipped by default. So `mvn package` produces the minified artifact. With the following configuration:

* getting source files from work directory `target/www` and minify it to target directory `target` and to work directory `target/www`.


SkipVariables
-------------

By default the packaging process is not skipped, so it launch compilation, aggregation and minification. But variables exist to escape those process :

* skipJsCompilation
* skipJsAggregation
* skipJsMinification

You can include those variables in pom.xml file to enabled/disabled the wanted process, like the following example : 

    <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <extensions>true</extensions>
        <configuration>
            <jsAggregationFiles>
                ...
            </jsAggregationFiles>
            <skipJsCompilation>true</skipCompilation>
            <skipJsAggregation>true</skipAggregation>
            <skipJsMinification>true</skipMinification>
        </configuration>
    </plugin>

The process respect the following order : `compilation` > `aggregation` > `minification`. So if you decide to skip the compilation process, the aggregation and minification are skipped too (and therefore when skipJsCompilation set to true, its useless to define the two others).


Integration Tests
-----------------

After aggregation and minification, it is recommended to check that the resulting JavaScript file is still behaving
consistently.

You can run the test on the aggregated version and/or the minified version. Integration tests (Jasmine's specs) are
placed in the `src/integration-test/js` directory. However this can be changed to re-execute the tests from
`src/test/js`:

    <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <extensions>true</extensions>
        <configuration>
            <jsAggregationFiles>
                <file>syndication-service</file> <!-- This is a dependency, we use the artifact id -->
                <file>FeedReaderImpl.js</file>
            </jsAggregationFiles>
            <javaScriptIntegrationTestDir>src/test/js</javaScriptIntegrationTestDir>
        </configuration>
    </plugin>

By default, it runs the integration tests on the aggregated version and on the minified version:

    [INFO] --- coffee-mill-maven-plugin:1.0.0-SNAPSHOT:jasmine-it-test (default-jasmine-it-test) @
    syndication-service-jfeed ---
    [INFO] Running integration tests on aggregated version
    [INFO] Executing Jasmine Specs
    [INFO]
    -------------------------------------------------------
    J A S M I N E   S P E C S
    -------------------------------------------------------
    [INFO]
    Direct Binding Test Suite
    should get news from lemonde.fr
    should get news from Google using RSS
    should get news from Google using ATOM

    Results: 3 specs, 0 failures

    [INFO] Running integration tests on minified version
    [INFO] Executing Jasmine Specs
    [INFO]
    -------------------------------------------------------
    J A S M I N E   S P E C S
    -------------------------------------------------------
    [INFO]
    Direct Binding Test Suite
    should get news from lemonde.fr
    should get news from Google using RSS
    should get news from Google using ATOM

    Results: 3 specs, 0 failures

To disable one of the version set:

* `runJasmineTestOnAggregatedVersion` : set to `false` to disable the integration tests on the aggregated version
* `runJasmineTestOnMinifiedVersion` : set to `false` to disable the integation tests on the minified version

